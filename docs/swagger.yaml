basePath: /
definitions:
  models.Book:
    properties:
      author:
        maxLength: 255
        type: string
      book_attrs:
        $ref: '#/definitions/models.BookAttrs'
      book_status:
        type: integer
      created_at:
        type: string
      id:
        type: string
      title:
        maxLength: 255
        type: string
      updated_at:
        type: string
      user_id:
        type: string
    required:
    - author
    - book_attrs
    - book_status
    - title
    type: object
  models.BookAttrs:
    properties:
      description:
        type: string
      picture:
        type: string
      rating:
        maximum: 10
        minimum: 0
        type: integer
    type: object
  models.BookForPublic:
    properties:
      author:
        maxLength: 255
        type: string
      book_attrs:
        $ref: '#/definitions/models.BookAttrs'
      book_status:
        type: integer
      id:
        type: string
      title:
        maxLength: 255
        type: string
    required:
    - author
    - book_attrs
    - book_status
    - id
    - title
    type: object
  models.SignIn:
    properties:
      email:
        maxLength: 255
        type: string
      password:
        maxLength: 255
        type: string
    required:
    - email
    - password
    type: object
  models.SignUp:
    properties:
      email:
        maxLength: 255
        type: string
      password:
        maxLength: 255
        type: string
      user_role:
        maxLength: 25
        type: string
    required:
    - email
    - password
    - user_role
    type: object
  models.User:
    properties:
      created_at:
        type: string
      email:
        maxLength: 255
        type: string
      id:
        type: string
      password_hash:
        maxLength: 255
        type: string
      updated_at:
        type: string
      user_role:
        maxLength: 25
        type: string
      user_status:
        type: integer
    required:
    - email
    - id
    - password_hash
    - user_role
    - user_status
    type: object
  response.HTTPError:
    properties:
      errorMessage: {}
    type: object
  utils.Tokens:
    properties:
      access_token:
        type: string
      refresh_token:
        type: string
    type: object
info:
  contact:
    email: aryanicosa@gmail.com
    name: API Support
  description: This is a sample swagger for Go Fiber Rest API
  title: Fiber Example API
  version: "1.0"
paths:
  /v1/book:
    post:
      consumes:
      - application/json
      description: Require valid user token
      parameters:
      - description: Book data
        in: body
        name: models.Book
        required: true
        schema:
          $ref: '#/definitions/models.Book'
      produces:
      - application/json
      responses:
        "201":
          description: Created
          schema:
            $ref: '#/definitions/models.Book'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/response.HTTPError'
        "403":
          description: Forbidden
          schema:
            $ref: '#/definitions/response.HTTPError'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/response.HTTPError'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/response.HTTPError'
      security:
      - ApiKeyAuth: []
      summary: Create new book
      tags:
      - Book
  /v1/book/id:
    delete:
      consumes:
      - application/json
      description: Require valid user token
      parameters:
      - description: Book ID
        in: path
        name: book_id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "204":
          description: No Content
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/response.HTTPError'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/response.HTTPError'
        "403":
          description: Forbidden
          schema:
            $ref: '#/definitions/response.HTTPError'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/response.HTTPError'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/response.HTTPError'
      security:
      - ApiKeyAuth: []
      summary: Delete a book
      tags:
      - Book
    get:
      consumes:
      - application/json
      description: |-
        Will display specific book by it's ID
        Require valid user token
      parameters:
      - description: Book ID
        in: path
        name: book_id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.Book'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/response.HTTPError'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/response.HTTPError'
      security:
      - BasicAuth: []
      summary: Get book by ID
      tags:
      - Book
    put:
      consumes:
      - application/json
      description: Require valid user token
      parameters:
      - description: Book ID
        in: path
        name: book_id
        required: true
        type: string
      - description: Book data
        in: body
        name: models.Book
        required: true
        schema:
          $ref: '#/definitions/models.Book'
      produces:
      - application/json
      responses:
        "201":
          description: Created
          schema:
            $ref: '#/definitions/models.Book'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/response.HTTPError'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/response.HTTPError'
        "403":
          description: Forbidden
          schema:
            $ref: '#/definitions/response.HTTPError'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/response.HTTPError'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/response.HTTPError'
      security:
      - ApiKeyAuth: []
      summary: Update a book
      tags:
      - Book
  /v1/books:
    get:
      consumes:
      - application/json
      description: |-
        Will display all books
        Require Basic Auth
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/models.BookForPublic'
            type: array
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/response.HTTPError'
      security:
      - BasicAuth: []
      summary: Get All Books
      tags:
      - Book
  /v1/misc/base64encode:
    post:
      consumes:
      - application/json
      description: Encode input string to Base64 string
      parameters:
      - description: arbitrary string
        in: body
        name: StringToEncode
        required: true
        schema:
          type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            type: string
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/response.HTTPError'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/response.HTTPError'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/response.HTTPError'
      summary: Encode String to Base64
      tags:
      - Miscellaneous
  /v1/user/sign/in:
    post:
      consumes:
      - application/json
      description: |-
        Sign In a User to get access token
        Require Basic Auth
      parameters:
      - description: User Credentials
        in: body
        name: models.SignIn
        required: true
        schema:
          $ref: '#/definitions/models.SignIn'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/utils.Tokens'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/response.HTTPError'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/response.HTTPError'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/response.HTTPError'
      security:
      - BasicAuth: []
      summary: Sign In
      tags:
      - User
  /v1/user/sign/out:
    post:
      consumes:
      - application/json
      description: de-authorize User and revoke token from redis
      produces:
      - application/json
      responses:
        "204":
          description: No Content
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/response.HTTPError'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/response.HTTPError'
      security:
      - ApiKeyAuth: []
      summary: Sign Out
      tags:
      - User
  /v1/user/sign/renew:
    post:
      consumes:
      - application/json
      description: |-
        re-authorize a User to get access token using refresh token
        Require valid user token
      parameters:
      - description: User Credentials
        in: body
        name: models.SignIn
        required: true
        schema:
          $ref: '#/definitions/models.SignIn'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/utils.Tokens'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/response.HTTPError'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/response.HTTPError'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/response.HTTPError'
      security:
      - ApiKeyAuth: []
      summary: Get New Access token use refresh token
      tags:
      - User
  /v1/user/sign/up:
    post:
      consumes:
      - application/json
      description: |-
        Create a new user.
        Require Basic Auth
      parameters:
      - description: User Data
        in: body
        name: models.SignUp
        required: true
        schema:
          $ref: '#/definitions/models.SignUp'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.User'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/response.HTTPError'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/response.HTTPError'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/response.HTTPError'
      security:
      - BasicAuth: []
      summary: create a new user
      tags:
      - User
securityDefinitions:
  ApiKeyAuth:
    in: header
    name: Authorization
    type: apiKey
  BasicAuth:
    type: basic
swagger: "2.0"
